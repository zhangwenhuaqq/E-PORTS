{"uid":"3753fa882b9a176e","name":"test_login[indata0]","fullName":"scripts.test_mail_pwd_login#test_login","historyId":"56bfbc9a428ee78d133aafadbc271bff","time":{"start":1705976088862,"stop":1705976097933,"duration":9071},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=119.0.6045.124)","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e10b472828e3fbd93e00cfa066454c0c\")>\nindata = {'mail': 'chuandong@163.com', 'name': '邮件/密码登录-账号与密码正常', 'pwd': '123qwe', 'success': True}\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.parametrize(\"indata\",scripts_data)\n    def test_login(driver, indata):\n        # 调用登录方法\n        login = PageLogin(driver)\n        login.page_login(indata[\"mail\"], indata[\"pwd\"])\n        if indata[\"success\"]:\n            try:\n                # 判断用户昵称是否存在\n>               assert login.page_is_login_success()\nE               AssertionError: assert False\nE                +  where False = <bound method PageLogin.page_is_login_success of <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>>()\nE                +    where <bound method PageLogin.page_is_login_success of <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>> = <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>.page_is_login_success\n\nscripts\\test_mail_pwd_login.py:19: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e10b472828e3fbd93e00cfa066454c0c\")>\nindata = {'mail': 'chuandong@163.com', 'name': '邮件/密码登录-账号与密码正常', 'pwd': '123qwe', 'success': True}\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.parametrize(\"indata\",scripts_data)\n    def test_login(driver, indata):\n        # 调用登录方法\n        login = PageLogin(driver)\n        login.page_login(indata[\"mail\"], indata[\"pwd\"])\n        if indata[\"success\"]:\n            try:\n                # 判断用户昵称是否存在\n                assert login.page_is_login_success()\n                #driver (driver.login.page_is_login_success())\n                log.info(\"登录成功，用户昵称存在\")\n                # # 点击用户昵称\n                # login.page_click_login_nickname()\n                # # 点击退出登录\n                # login.page_click_login_logout()\n                # # 点击确认退出登录\n                # login.page_click_login_logout_bt()\n                # try:\n                #     assert login.page_is_logout_success()\n                #     #driver.assertTrue(driver.login.page_is_logout_success())\n                #     log.info(\"登出成功，检查'登录页登录密码'存在\")\n                # except Exception as e:\n                #     log.error(e)\n                #     # 截图\n                #     login.page_get_image()\n            except Exception as e:\n                log.error(e)\n                # 截图\n>               login.page_get_image()\n\nscripts\\test_mail_pwd_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\page_mail_pwd_login.py:31: in page_get_image\n    self.base_get_image()\nbase\\base.py:45: in base_get_image\n    self.driver.get_screenshot_as_file(\"../image/image{}.png\".format(time.strftime(\"%Y_%m_%d %H_%M_S\")))\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1032: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AB9CE96CD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6715CD3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE6BD1257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE6C1CAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.124)\n\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1705976084461,"stop":1705976088861,"duration":4400},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=119.0.6045.124)","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e10b472828e3fbd93e00cfa066454c0c\")>\nindata = {'mail': 'chuandong@163.com', 'name': '邮件/密码登录-账号与密码正常', 'pwd': '123qwe', 'success': True}\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.parametrize(\"indata\",scripts_data)\n    def test_login(driver, indata):\n        # 调用登录方法\n        login = PageLogin(driver)\n        login.page_login(indata[\"mail\"], indata[\"pwd\"])\n        if indata[\"success\"]:\n            try:\n                # 判断用户昵称是否存在\n>               assert login.page_is_login_success()\nE               AssertionError: assert False\nE                +  where False = <bound method PageLogin.page_is_login_success of <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>>()\nE                +    where <bound method PageLogin.page_is_login_success of <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>> = <page.page_mail_pwd_login.PageLogin object at 0x000001AB9CE838B0>.page_is_login_success\n\nscripts\\test_mail_pwd_login.py:19: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e10b472828e3fbd93e00cfa066454c0c\")>\nindata = {'mail': 'chuandong@163.com', 'name': '邮件/密码登录-账号与密码正常', 'pwd': '123qwe', 'success': True}\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.parametrize(\"indata\",scripts_data)\n    def test_login(driver, indata):\n        # 调用登录方法\n        login = PageLogin(driver)\n        login.page_login(indata[\"mail\"], indata[\"pwd\"])\n        if indata[\"success\"]:\n            try:\n                # 判断用户昵称是否存在\n                assert login.page_is_login_success()\n                #driver (driver.login.page_is_login_success())\n                log.info(\"登录成功，用户昵称存在\")\n                # # 点击用户昵称\n                # login.page_click_login_nickname()\n                # # 点击退出登录\n                # login.page_click_login_logout()\n                # # 点击确认退出登录\n                # login.page_click_login_logout_bt()\n                # try:\n                #     assert login.page_is_logout_success()\n                #     #driver.assertTrue(driver.login.page_is_logout_success())\n                #     log.info(\"登出成功，检查'登录页登录密码'存在\")\n                # except Exception as e:\n                #     log.error(e)\n                #     # 截图\n                #     login.page_get_image()\n            except Exception as e:\n                log.error(e)\n                # 截图\n>               login.page_get_image()\n\nscripts\\test_mail_pwd_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\page_mail_pwd_login.py:31: in page_get_image\n    self.base_get_image()\nbase\\base.py:45: in base_get_image\n    self.driver.get_screenshot_as_file(\"../image/image{}.png\".format(time.strftime(\"%Y_%m_%d %H_%M_S\")))\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1032: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AB9CE96CD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6715CD3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE6BD1257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE6C1CAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.124)\n\nD:\\E-PORTS\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException","steps":[],"attachments":[{"uid":"1ed88e25286a9088","name":"log","source":"1ed88e25286a9088.txt","type":"text/plain","size":3068}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1705976098112,"stop":1705976100181,"duration":2069},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"scripts"},{"name":"suite","value":"test_mail_pwd_login"},{"name":"host","value":"zhangwenhua01"},{"name":"thread","value":"18480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"scripts.test_mail_pwd_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"indata","value":"{'name': '邮件/密码登录-账号与密码正常', 'mail': 'chuandong@163.com', 'pwd': '123qwe', 'success': True}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=1)"]},"source":"3753fa882b9a176e.json","parameterValues":["{'name': '邮件/密码登录-账号与密码正常', 'mail': 'chuandong@163.com', 'pwd': '123qwe', 'success': True}"]}